%%includes
#include <math.h>
#include <string.h>
#if _MSC_VER
#include <xmmintrin.h>
#include <emmintrin.h>
#endif
%%declarations
#if _MSC_VER
#define UNLIKELY(x) (x)
#define LIKELY(x) (x)
#else
#define UNLIKELY(x) __builtin_expect(!!(x), 0)
#define LIKELY(x) __builtin_expect(!!(x), 1)
#endif

#define TRAP(x) (wasm_rt_trap(WASM_RT_TRAP_##x), 0)

#define FUNC_PROLOGUE(frame_size)                                              \
  if ((++wasm_rt_call_stack_depth > WASM_RT_MAX_CALL_STACK_DEPTH) ||           \
      ((wasm_rt_call_stack_size += frame_size) > WASM_RT_MAX_CALL_STACK_SIZE)) \
    TRAP(EXHAUSTION)

#define FUNC_EPILOGUE(frame_size)                                \
  --wasm_rt_call_stack_depth;                                    \
  wasm_rt_call_stack_size -= frame_size

#define UNREACHABLE TRAP(UNREACHABLE)

#define CALL_INDIRECT(table, t, ft, x, ...)          \
  (LIKELY((x) < table.size && table.data[x].func &&  \
          table.data[x].func_type == func_types[ft]) \
       ? ((t)table.data[x].func)(__VA_ARGS__)        \
       : TRAP(CALL_INDIRECT))

#define MEMCHECK(mem, a, t)  \
  if (UNLIKELY((a) + sizeof(t) > mem->size)) TRAP(OOB)

#define DEFINE_LOAD(name, t1, t2, t3)                                 \
  static inline t3 WASM_RT_CC name(wasm_rt_memory_t* mem, u64 addr) { \
    MEMCHECK(mem, addr, t1);                                          \
    t1 result;                                                        \
    memcpy(&result, &mem->data[addr], sizeof(t1));                    \
    return (t3)(t2)result;                                            \
  }

#define DEFINE_STORE(name, t1, t2)                                    \
  static inline void WASM_RT_CC name(wasm_rt_memory_t* mem, u64 addr, \
                                     t2 value) {                      \
    MEMCHECK(mem, addr, t1);                                          \
    t1 wrapped = (t1)value;                                           \
    memcpy(&mem->data[addr], &wrapped, sizeof(t1));                   \
  }

DEFINE_LOAD(i32_load, u32, u32, u32);
DEFINE_LOAD(i64_load, u64, u64, u64);
DEFINE_LOAD(f32_load, f32, f32, f32);
DEFINE_LOAD(f64_load, f64, f64, f64);
DEFINE_LOAD(i32_load8_s, s8, s32, u32);
DEFINE_LOAD(i64_load8_s, s8, s64, u64);
DEFINE_LOAD(i32_load8_u, u8, u32, u32);
DEFINE_LOAD(i64_load8_u, u8, u64, u64);
DEFINE_LOAD(i32_load16_s, s16, s32, u32);
DEFINE_LOAD(i64_load16_s, s16, s64, u64);
DEFINE_LOAD(i32_load16_u, u16, u32, u32);
DEFINE_LOAD(i64_load16_u, u16, u64, u64);
DEFINE_LOAD(i64_load32_s, s32, s64, u64);
DEFINE_LOAD(i64_load32_u, u32, u64, u64);
DEFINE_STORE(i32_store, u32, u32);
DEFINE_STORE(i64_store, u64, u64);
DEFINE_STORE(f32_store, f32, f32);
DEFINE_STORE(f64_store, f64, f64);
DEFINE_STORE(i32_store8, u8, u32);
DEFINE_STORE(i32_store16, u16, u32);
DEFINE_STORE(i64_store8, u8, u64);
DEFINE_STORE(i64_store16, u16, u64);
DEFINE_STORE(i64_store32, u32, u64);

#if _MSC_VER
#if _M_IX86
static inline unsigned long LowDword(unsigned __int64 value) {
  return (unsigned long)value;
}

static inline unsigned long HighDword(unsigned __int64 value) {
  unsigned long high;
  memcpy(&high, (unsigned char*)&value + sizeof(high), sizeof(high));
  return high;
}
#endif

static inline int I32_CLZ(unsigned long mask) {
  if (mask == 0)
    return 32;
  unsigned long index;
  _BitScanReverse(&index, mask);
  return sizeof(unsigned long) * 8 - (index + 1);
}

static inline int I64_CLZ(unsigned __int64 mask) {
#if _M_X64
  if (mask == 0) return 64;
  unsigned long index;
  _BitScanReverse64(&index, mask);
  return sizeof(unsigned __int64) * 8 - (index + 1);
#elif _M_IX86
  int result = I32_CLZ(HighDword(mask));
  if (result == 32)
    result += I32_CLZ(LowDword(mask));
  return result;
#else
#error unexpected architecture
#endif
}

static inline int I32_CTZ(unsigned long mask) {
  if (mask == 0) return 32;
  unsigned long index;
  _BitScanForward(&index, mask);
  return index;
}

static inline int I64_CTZ(unsigned __int64 mask) {
#if _M_X64
  if (mask == 0) return 64;
  unsigned long index;
  _BitScanForward64(&index, mask);
  return index;
#elif _M_IX86
  int result = I32_CTZ(LowDword(mask));
  if (result == 32)
    result += I32_CTZ(HighDword(mask));
  return result;
#else
#error unexpected architecture
#endif
}

static inline int I32_POPCNT(unsigned long value) {
  return __popcnt(value);
}

static inline int I64_POPCNT(unsigned __int64 value) {
#if _M_X64
  return __popcnt64(value);
#elif _M_IX86
  return I32_POPCNT(HighDword(value)) + I32_POPCNT(LowDword(value));
#else
#error unexpected architecture
#endif
}

#else
#define I32_CLZ(x) ((x) ? __builtin_clz(x) : 32)
#define I64_CLZ(x) ((x) ? __builtin_clzll(x) : 64)
#define I32_CTZ(x) ((x) ? __builtin_ctz(x) : 32)
#define I64_CTZ(x) ((x) ? __builtin_ctzll(x) : 64)
#define I32_POPCNT(x) (__builtin_popcount(x))
#define I64_POPCNT(x) (__builtin_popcountll(x))
#endif

#define DIV_S(ut, min, x, y)                                 \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO)  \
  : (UNLIKELY((x) == min && (y) == -1)) ? TRAP(INT_OVERFLOW) \
  : (ut)((x) / (y)))

#define REM_S(ut, min, x, y)                                \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO) \
  : (UNLIKELY((x) == min && (y) == -1)) ? 0                 \
  : (ut)((x) % (y)))

#define I32_DIV_S(x, y) DIV_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_DIV_S(x, y) DIV_S(u64, INT64_MIN, (s64)x, (s64)y)
#define I32_REM_S(x, y) REM_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_REM_S(x, y) REM_S(u64, INT64_MIN, (s64)x, (s64)y)

#define DIVREM_U(op, x, y) \
  ((UNLIKELY((y) == 0)) ? TRAP(DIV_BY_ZERO) : ((x) op (y)))

#define DIV_U(x, y) DIVREM_U(/, x, y)
#define REM_U(x, y) DIVREM_U(%, x, y)

#define ROTL(x, y, mask) \
  (((x) << ((y) & (mask))) | ((x) >> (((mask) - (y) + 1) & (mask))))
#define ROTR(x, y, mask) \
  (((x) >> ((y) & (mask))) | ((x) << (((mask) - (y) + 1) & (mask))))

#define I32_ROTL(x, y) ROTL(x, y, 31)
#define I64_ROTL(x, y) ROTL(x, y, 63)
#define I32_ROTR(x, y) ROTR(x, y, 31)
#define I64_ROTR(x, y) ROTR(x, y, 63)

#define FMIN(x, y)                                          \
   ((UNLIKELY((x) != (x))) ? NAN                            \
  : (UNLIKELY((y) != (y))) ? NAN                            \
  : (UNLIKELY((x) == 0 && (y) == 0)) ? (signbit(x) ? x : y) \
  : (x < y) ? x : y)

#define FMAX(x, y)                                          \
   ((UNLIKELY((x) != (x))) ? NAN                            \
  : (UNLIKELY((y) != (y))) ? NAN                            \
  : (UNLIKELY((x) == 0 && (y) == 0)) ? (signbit(x) ? y : x) \
  : (x > y) ? x : y)

#define TRUNC_S(ut, st, ft, min, max, maxop, x)                             \
   ((UNLIKELY((x) != (x))) ? TRAP(INVALID_CONVERSION)                       \
  : (UNLIKELY((x) < (ft)(min) || (x) maxop (ft)(max))) ? TRAP(INT_OVERFLOW) \
  : (ut)(st)(x))

#define I32_TRUNC_S_F32(x) TRUNC_S(u32, s32, f32, INT32_MIN, INT32_MAX, >=, x)
#define I64_TRUNC_S_F32(x) TRUNC_S(u64, s64, f32, INT64_MIN, INT64_MAX, >=, x)
#define I32_TRUNC_S_F64(x) TRUNC_S(u32, s32, f64, INT32_MIN, INT32_MAX, >,  x)
#define I64_TRUNC_S_F64(x) TRUNC_S(u64, s64, f64, INT64_MIN, INT64_MAX, >=, x)

#define TRUNC_U(ut, ft, max, maxop, x)                                    \
   ((UNLIKELY((x) != (x))) ? TRAP(INVALID_CONVERSION)                     \
  : (UNLIKELY((x) <= (ft)-1 || (x) maxop (ft)(max))) ? TRAP(INT_OVERFLOW) \
  : (ut)(x))

#define I32_TRUNC_U_F32(x) TRUNC_U(u32, f32, UINT32_MAX, >=, x)
#define I64_TRUNC_U_F32(x) TRUNC_U(u64, f32, UINT64_MAX, >=, x)
#define I32_TRUNC_U_F64(x) TRUNC_U(u32, f64, UINT32_MAX, >,  x)
#define I64_TRUNC_U_F64(x) TRUNC_U(u64, f64, UINT64_MAX, >=, x)

#define DEFINE_REINTERPRET(name, t1, t2)   \
  static inline t2 WASM_RT_CC name(t1 x) { \
    t2 result;                             \
    memcpy(&result, &x, sizeof(result));   \
    return result;                         \
  }

DEFINE_REINTERPRET(f32_reinterpret_i32, u32, f32)
DEFINE_REINTERPRET(i32_reinterpret_f32, f32, u32)
DEFINE_REINTERPRET(f64_reinterpret_i64, u64, f64)
DEFINE_REINTERPRET(i64_reinterpret_f64, f64, u64)

#if _MSC_VER
static inline f32 __vectorcall F32_COPYSIGN(f32 x, f32 y) {
#if _M_X64 || _M_IX86
  return _mm_cvtss_f32(_mm_or_ps(
      _mm_and_ps(_mm_set_ss(x),
                 _mm_castsi128_ps(_mm_set_epi32(0, 0, 0, 0x7fffffffu))),
      _mm_and_ps(_mm_set_ss(y),
                 _mm_castsi128_ps(_mm_set_epi32(0, 0, 0, 0x80000000u)))));
#else
#error unexpected architecture
#endif
}

static inline f64 __vectorcall F64_COPYSIGN(f64 x, f64 y) {
#if _M_X64 || _M_IX86
  return _mm_cvtsd_f64(_mm_or_pd(
      _mm_and_pd(_mm_set_sd(x), _mm_castsi128_pd(_mm_set_epi32(
                                    0, 0, 0x7fffffffu, 0xffffffffu))),
      _mm_and_pd(_mm_set_sd(y),
                 _mm_castsi128_pd(_mm_set_epi32(0, 0, 0x80000000u, 0)))));
#else
#error unexpected architecture
#endif
}

static inline f32 __vectorcall F32_ABS(f32 x) { return F32_COPYSIGN(x, 0.f); }
static inline f64 __vectorcall F64_ABS(f64 x) { return F64_COPYSIGN(x, 0.f); }
#else
#define F32_ABS fabsf
#define F64_ABS fabs
#define F32_COPYSIGN copysignf
#define F64_COPYSIGN copysign
#endif

